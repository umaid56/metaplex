"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.createBuyInstruction = exports.buyInstructionDiscriminator = exports.buyStruct = void 0;
var splToken = require("@solana/spl-token");
var beet = require("@metaplex-foundation/beet");
var web3 = require("@solana/web3.js");
/**
 * @category Instructions
 * @category Buy
 * @category generated
 */
exports.buyStruct = new beet.BeetArgsStruct([
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['tradeStateBump', beet.u8],
    ['escrowPaymentBump', beet.u8],
    ['buyerPrice', beet.u64],
    ['tokenSize', beet.u64],
], 'BuyInstructionArgs');
exports.buyInstructionDiscriminator = [102, 6, 61, 18, 1, 218, 235, 234];
/**
 * Creates a _Buy_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Buy
 * @category generated
 */
function createBuyInstruction(accounts, args, programId) {
    var _a, _b, _c;

    if (programId === void 0) { programId = new web3.PublicKey('hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk'); }
    var data = exports.buyStruct.serialize(__assign({ instructionDiscriminator: exports.buyInstructionDiscriminator }, args))[0];
    var keys = [
        {
            pubkey: accounts.wallet,
            isWritable: false,
            isSigner: true
        },
        {
            pubkey: accounts.paymentAccount,
            isWritable: true,
            isSigner: false
        },
        {
            pubkey: accounts.transferAuthority,
            isWritable: false,
            isSigner: false
        },
        {
            pubkey: accounts.treasuryMint,
            isWritable: false,
            isSigner: false
        },
        {
            pubkey: accounts.tokenAccount,
            isWritable: false,
            isSigner: false
        },
        {
            pubkey: accounts.metadata,
            isWritable: false,
            isSigner: false
        },
        {
            pubkey: accounts.escrowPaymentAccount,
            isWritable: true,
            isSigner: false
        },
        {
            pubkey: accounts.authority,
            isWritable: false,
            isSigner: false
        },
        {
            pubkey: accounts.auctionHouse,
            isWritable: false,
            isSigner: false
        },
        {
            pubkey: accounts.auctionHouseFeeAccount,
            isWritable: true,
            isSigner: false
        },
        {
            pubkey: accounts.buyerTradeState,
            isWritable: true,
            isSigner: false
        },
        {
            pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
            isWritable: false,
            isSigner: false
        },
        {
            pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
            isWritable: false,
            isSigner: false
        },
        {
            pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
            isWritable: false,
            isSigner: false
        },
    ];

    if (accounts.anchorRemainingAccounts != null) {
        for (var _i = 0, _d = accounts.anchorRemainingAccounts; _i < _d.length; _i++) {
            var acc = _d[_i];
            keys.push(acc);
        }
    }
    var ix = new web3.TransactionInstruction({
        programId: programId,
        keys: keys,
        data: data
    });
    return ix;
}
exports.createBuyInstruction = createBuyInstruction;
